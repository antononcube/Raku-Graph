use v6.d;

use lib <. lib>;

use Graph;
use Test;

my @edges =
        { from => '1', to => '5', weight => 1 },
        { from => '1', to => '7', weight => 1 },
        { from => '2', to => '3', weight => 1 },
        { from => '2', to => '4', weight => 1 },
        { from => '2', to => '6', weight => 1 },
        { from => '2', to => '7', weight => 1 },
        { from => '2', to => '8', weight => 1 },
        { from => '2', to => '10', weight => 1 },
        { from => '2', to => '12', weight => 1 },
        { from => '3', to => '4', weight => 1 },
        { from => '3', to => '8', weight => 1 },
        { from => '4', to => '9', weight => 1 },
        { from => '5', to => '12', weight => 1 },
        { from => '6', to => '7', weight => 1 },
        { from => '9', to => '10', weight => 1 },
        { from => '11', to => '12', weight => 1 };

plan *;

## 1
my $graph1 = Graph.new;
ok $graph1.add-edges(@edges);

## 2
is $graph1.edge-count, @edges.elems;

## 3
is $graph1.vertex-count, 12;

## 4
is-deeply $graph1.vertex-list.sort, (1..12)Â».Str.sort.List;

## 5
is-deeply $graph1.find-shortest-path('1', '4'), ["1", "7", "2", "4"];

## 6
is-deeply $graph1.find-hamiltonian-path.sort, $graph1.vertex-list.sort;

done-testing;
