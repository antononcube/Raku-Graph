use v6.d;
use Test;

#use lib <. lib>;

use Graph;
use Graph::Complete;
use Graph::Grid;

## 1
my $g1 = Graph::Grid.new(4, 6);
my @vs1 = ((^3) X (^2)).map({ $_.join('_') });
isa-ok $g1.subgraph(@vs1), Graph;

## 2
my $g2 = $g1.subgraph(@vs1);

isa-ok $g1.subgraph($g2.edges), Graph;

subtest {
    my $g = Graph::Grid.new(20, 30);

    my $vset = $g.vertex-list (-) $g.neighborhood-graph($g.vertex-list.pick(40), d => 1).vertex-list;

    my $g2 = $g.subgraph($vset.keys);

    is
            $g2.vertex-count < $g.vertex-count,
            True,
            'Less vertexes';

    is
            $g2.vertex-coordinates.keys.elems,
            $g2.vertex-count,
            'Same number of vertexes';

}, 'Expected vertex coordinates';

subtest {

    my $g = Graph::Complete(8);
    #say $g.wl(VertexLabels => "Name");

    my $g2 = $g.subgraph((1..5)Â».Str);
    #say $g2.wl(VertexLabels => "Name");

    is $g2.is-complete, True;

}, 'The subgraph of a complete graph is a complete graph';

done-testing;
